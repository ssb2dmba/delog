/**
 * Delog
 * Copyright (C) 2023 dmba.info
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id "kotlin-parcelize"
    id 'org.jetbrains.kotlin.plugin.serialization'
}


android {
    namespace 'in.delog'
    compileSdk 34
    ndkVersion "21.3.6528147"
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }
    splits {
        // Configures multiple APKs based on ABI. This helps keep the size
        // down, since PT binaries can be large.
        abi {
            // Enables building multiple APKs per ABI.
            //isEnable = true
            // By default, all ABIs are included, so use reset() and include to specify
            // that we only want APKs for x86 and x86_64, armeabi-v7a, and arm64-v8a.
            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()
            // Specifies a list of ABIs that Gradle should create APKs for.
            include("x86", "armeabi-v7a", "arm64-v8a", "x86_64")
            // Specify whether you wish to also generate a universal APK that
            // includes _all_ ABIs.
            //isUniversalApk = true
        }
    }

    defaultConfig {
        minSdk 26
        targetSdk 34
        versionCode 1
        versionName "1.0"
        applicationId  "in.delog.ssb"
        testApplicationId  "in.delog.ssb.test"
        if (getProperty("cucumberUseAndroidJUnitRunner")) {
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        } else {
            testInstrumentationRunner "in.delog.ssb.test.Instrumentation"
            testInstrumentationRunnerArguments = [
                    cucumberUseAndroidJUnitRunner: getProperty("cucumberUseAndroidJUnitRunner"),
                    //uncomment this to clear app data before each test when running with orchestrator
                    clearPackageData             : 'true'
            ]
        }

        // 2) Connect JUnit 5 to the runner
        //testInstrumentationRunnerArguments["runnerBuilder"] = "de.mannodermaus.junit5.AndroidJUnit5Builder"

        ndk.abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    // To let the libs be included in other projects
    externalNativeBuild {
        ndkBuild {
            path "../jni/Android.mk"
        }
    }

    kotlinOptions {
        jvmTarget = '17'
    }
    packagingOptions {
        jniLibs.useLegacyPackaging = true
        resources {
            excludes += ['META-INF/INDEX.LIST', 'META-INF/*.md', 'META-INF/io.netty.versions.properties']
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        animationsDisabled true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.4.3"
    }
}

task nativeLibsToJar(type: Jar, description: 'create a jar archive of the native libs') {
    from fileTree(dir: 'libs', include: '**/*.so')
    into 'lib/'
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn(nativeLibsToJar)
}

dependencies {
    // Android Kotlin Project
    implementation 'androidx.compose.material:material:1.4.1'
    implementation 'androidx.paging:paging-compose:1.0.0-alpha18'
    implementation 'androidx.webkit:webkit:1.9.0'
    ext.kotlin_version = "1.8.10"
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")
    implementation "androidx.core:core-ktx:1.9.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.compose:compose-bom:2023.10.00'
    androidTestImplementation 'androidx.compose:compose-bom:2023.10.00'
    // Android Room
    ext.room_version = '2.5.1'
    implementation("androidx.room:room-runtime:$room_version")
    annotationProcessor("androidx.room:room-compiler:$room_version")
    kapt("androidx.room:room-compiler:$room_version")
    implementation("androidx.room:room-ktx:$room_version")
    implementation("androidx.room:room-paging:$room_version")
    // material 3 and adaptive accompanist
    implementation "androidx.compose.material3:material3:1.1.2"
    implementation('com.google.accompanist:accompanist-insets:0.30.1')
    implementation('com.google.accompanist:accompanist-adaptive:0.30.1')
    implementation "com.google.accompanist:accompanist-permissions:0.30.1"
    implementation "androidx.compose.material:material-icons-extended"
    implementation "androidx.compose.material3:material3-window-size-class:1.1.2"
    // Android Studio Preview support
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    implementation 'androidx.activity:activity-compose'
    //Koin
    ext.koin_version = '3.3.0'
    implementation "io.insert-koin:koin-android:$koin_version"
    implementation "io.insert-koin:koin-androidx-compose:$koin_version"
    // live data + view model
    implementation "androidx.compose.runtime:runtime-livedata"
    kapt 'androidx.lifecycle:lifecycle-compiler:2.6.2'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.2'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.2'
    // crypto
    implementation("org.bouncycastle:bcprov-jdk15on:1.70")
    implementation('org.bouncycastle:bcpkix-jdk15on:1.70')
    implementation("org.miracl.milagro.amcl:milagro-crypto-java:0.4.0")
    // kmp-tor
    ext.vTor = "4.8.6-0"
    ext.vKmpTor = "1.4.4"
    implementation("io.matthewnelson.kotlin-components:kmp-tor:$vTor-$vKmpTor")
    // tools & networking
    implementation("org.syncope.identityconnectors:framework:0.4.3")
    compileOnly('io.vertx:vertx-core:4.4.1')
    implementation('org.slf4j:slf4j-api:2.0.7')
    implementation("com.fasterxml.jackson.core:jackson-databind:2.13.4.2")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.7.1-2")
    implementation 'commons-codec:commons-codec:1.15'
    implementation("com.google.guava:guava:31.1-jre")
    implementation('io.vertx:vertx-lang-kotlin-coroutines:4.4.1')
    implementation('org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.0')
    // link preview
    implementation 'com.linkedin.urls:url-detector:0.1.17'
    implementation 'org.jsoup:jsoup:1.16.1'
    implementation("org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.6")
    implementation 'io.coil-kt:coil-compose:2.3.0'
    implementation "net.engawapg.lib:zoomable:1.5.2"
    implementation "androidx.media3:media3-exoplayer:1.2.0-rc01"
    implementation "androidx.media3:media3-ui:1.2.0-rc01"
    implementation "androidx.media3:media3-session:1.2.0-rc01"
    implementation "androidx.media3:media3-datasource-okhttp:1.2.0-rc01"
    implementation "androidx.media3:media3-exoplayer-hls:1.2.0-rc01"
    implementation 'com.github.lincollincol:compose-audiowaveform:1.1.1'
    // Rendering clickable text
    implementation 'com.google.accompanist:accompanist-flowlayout:0.30.0'
    implementation 'com.google.accompanist:accompanist-webview:0.30.0'
    implementation 'com.github.jeziellago:compose-markdown:0.3.6'

    implementation "androidx.datastore:datastore-preferences:1.0.0"

    implementation 'androidx.emoji2:emoji2-emojipicker:1.4.0-beta05'
    // qr code printing
    implementation "com.google.zxing:core:3.5.1"
    implementation 'com.halilibo.compose-richtext:printing:0.16.0'
    implementation 'androidx.camera:camera-core:1.3.0-rc02'
    implementation 'androidx.camera:camera-camera2:1.3.0-rc02'
    implementation 'androidx.camera:camera-lifecycle:1.3.0-rc02'
    implementation 'androidx.camera:camera-view:1.3.0-rc02'


    androidTestUtil 'androidx.test:orchestrator:1.4.0'
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.4.1'
    // junit5 for org.apache
    androidTestImplementation("org.junit.jupiter:junit-jupiter-api:5.9.2")
    androidTestImplementation("de.mannodermaus.junit5:android-test-core:1.3.0")
    androidTestRuntimeOnly("de.mannodermaus.junit5:android-test-runner:1.3.0")
    // e2e integration tests
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation('androidx.test.espresso:espresso-web:3.5.1')

    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'io.cucumber:cucumber-android:4.10.0'
    androidTestImplementation 'io.cucumber:cucumber-picocontainer:4.8.1'

}

task('generateSWIGsource') {
    //dependsOn libsodium
    inputs.dir fileTree(dir: "${projectDir}/../jni")
    outputs.dir("${projectDir}/src/main/java/org/libsodium/jni")
    outputs.file "${projectDir}/../jni/sodium_wrap.c"
    doFirst {
        exec {
            workingDir "${projectDir}/../jni"
            commandLine 'swig', '-java', '-package', 'in.delog.libsodium', '-outdir', '../app/src/main/java/in/delog/libsodium', 'sodium.i'
        }
    }
}

gradle.projectsEvaluated {
    preBuild.dependsOn 'generateSWIGsource'
}
[
        [input_arch: 'arm', output_arch: 'android-armv6', ndk_platform: 'android-19'],
        [input_arch: 'armv7-a', output_arch: 'android-armv7-a', ndk_platform: 'android-19'],
        [input_arch: 'armv8-a', output_arch: 'android-armv8-a', ndk_platform: 'android-21'],
        [input_arch: 'x86', output_arch: 'android-i686', ndk_platform: 'android-19'],
        [input_arch: 'x86_64', output_arch: 'android-westmere', ndk_platform: 'android-21'],
].each { opts ->
    def taskname = "compileNative_${opts['output_arch']}"

    task(taskname) {
        dependsOn generateSWIGsource
        inputs.dir fileTree(dir: "../libsodium/src", exclude: ['libsodium/**/.libs', 'libsodium/*.la', 'libsodium/**/*.lo', 'libsodium/**/*.o', 'libsodium/**/*.Plo', '**/Makefile', '**/Makefile.in', '**/.deps/*', '**/.libs/*'])
        outputs.dir("../libsodium/libsodium-${opts['output_arch']}")
        File file = new File("${projectDir.absolutePath}/libsodium/libsodium-${opts['output_arch']}/lib/libsodium.so")
        if (file.exists()) {
            return
        }
        doFirst {
            exec {
                workingDir '../libsodium'
                commandLine './autogen.sh', '-f'
            }
            exec {
                workingDir '../libsodium'
                environment 'LIBSODIUM_FULL_BUILD', 'true'
                executable "dist-build/android-${opts['input_arch']}.sh"
                environment 'CONFIG_SITE', ''
                environment 'NDK_PLATFORM', opts['ndk_platform'] // cross compile
            }
        }
    }

    gradle.projectsEvaluated {
        preBuild.dependsOn taskname
        preBuild.dependsOn taskname
    }
}


gradle.projectsEvaluated {
    generateJsonModelDebug.dependsOn 'generateSWIGsource'
    generateJsonModelRelease.dependsOn 'generateSWIGsource'
}

apply plugin: "c"

task cleanLibsodium {
    doLast {
        exec {
            workingDir '../libsodium'
            commandLine 'make'
            args 'clean'
        }
        File file2 = new File("${projectDir.absolutePath}/../jni/libsodiumjni.so")
        if (file2.exists()) {
            delete file2
        }
        File file3 = new File("${projectDir.absolutePath}/../jni/sodium_wrap.c")
        if (file3.exists()) {
            delete file3
        }
    }
}
